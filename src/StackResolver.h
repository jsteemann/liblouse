
#ifndef LOUSE_STACKRESOLVER_H
#define LOUSE_STACKRESOLVER_H 1

#include <unordered_map>

// -----------------------------------------------------------------------------
// --SECTION--                                               class StackResolver
// -----------------------------------------------------------------------------

namespace debugging {
  class StackResolver {

// -----------------------------------------------------------------------------
// --SECTION--                                        constructors / destructors
// -----------------------------------------------------------------------------

    public:

////////////////////////////////////////////////////////////////////////////////
/// @brief create the resolver
////////////////////////////////////////////////////////////////////////////////

      StackResolver ();

////////////////////////////////////////////////////////////////////////////////
/// @brief destroy the resolver
////////////////////////////////////////////////////////////////////////////////

      ~StackResolver ();

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

    public:

////////////////////////////////////////////////////////////////////////////////
/// @brief captures a stacktrace
////////////////////////////////////////////////////////////////////////////////

      static void** captureStackTrace (int);

////////////////////////////////////////////////////////////////////////////////
/// @brief captures a stacktrace
////////////////////////////////////////////////////////////////////////////////

      static bool captureStackTrace (int, void**, int);

////////////////////////////////////////////////////////////////////////////////
/// @brief converts a stacktrace into human-readable text
////////////////////////////////////////////////////////////////////////////////

      char* resolveStack (int, bool, char*, size_t, void**);

// -----------------------------------------------------------------------------
// --SECTION--                                                   private methods
// -----------------------------------------------------------------------------

    private:

////////////////////////////////////////////////////////////////////////////////
/// @brief calls addr2line 
////////////////////////////////////////////////////////////////////////////////

      char* addr2line (bool, char const*, void*, char**);

////////////////////////////////////////////////////////////////////////////////
/// @brief determines the name of the executable
////////////////////////////////////////////////////////////////////////////////

      void determineProgname ();

////////////////////////////////////////////////////////////////////////////////
/// @brief determines the current directory
////////////////////////////////////////////////////////////////////////////////

      void determineDirectory ();

////////////////////////////////////////////////////////////////////////////////
/// @brief returns the name of the executable
////////////////////////////////////////////////////////////////////////////////

      char const* progname () const {
        return &prognameBuffer_[0];
      }

// -----------------------------------------------------------------------------
// --SECTION--                                                 private variables
// -----------------------------------------------------------------------------

    private:

////////////////////////////////////////////////////////////////////////////////
/// @brief resolved functions cache
////////////////////////////////////////////////////////////////////////////////

      std::unordered_map<void*, char*>   cache_;

////////////////////////////////////////////////////////////////////////////////
/// @brief buffer for executable name
////////////////////////////////////////////////////////////////////////////////

      char                               prognameBuffer_[512];

////////////////////////////////////////////////////////////////////////////////
/// @brief buffer for directory name
////////////////////////////////////////////////////////////////////////////////

      char                               directoryBuffer_[512];

////////////////////////////////////////////////////////////////////////////////
/// @brief length of directory name
////////////////////////////////////////////////////////////////////////////////

      size_t                             directoryLength_;

  };
}

#endif
