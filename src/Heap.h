
#ifndef LOUSE_HEAP_H
#define LOUSE_HEAP_H 1

#include <cstdlib>
#include <cstddef>
#include <mutex>
#include <utility>

// -----------------------------------------------------------------------------
// --SECTION--                                                        class Heap
// -----------------------------------------------------------------------------

namespace debugging {
  struct MemoryAllocation;

  class Heap {

// -----------------------------------------------------------------------------
// --SECTION--                                        constructors / destructors
// -----------------------------------------------------------------------------
    
    public:

////////////////////////////////////////////////////////////////////////////////
/// @brief create the heap
////////////////////////////////////////////////////////////////////////////////

      Heap ();

////////////////////////////////////////////////////////////////////////////////
/// @brief destroy the heap
////////////////////////////////////////////////////////////////////////////////

      ~Heap ();

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

    public:

////////////////////////////////////////////////////////////////////////////////
/// @brief add a memory block to the heap
////////////////////////////////////////////////////////////////////////////////

      void add (MemoryAllocation*);

////////////////////////////////////////////////////////////////////////////////
/// @brief remove a memory block from the heap
////////////////////////////////////////////////////////////////////////////////

      void remove (MemoryAllocation*);

////////////////////////////////////////////////////////////////////////////////
/// @brief get the first memory block in the heap
////////////////////////////////////////////////////////////////////////////////
  
      MemoryAllocation* begin () const {
        return head_;
      }

////////////////////////////////////////////////////////////////////////////////
/// @brief get heap statistics
////////////////////////////////////////////////////////////////////////////////

      std::pair<uint64_t, uint64_t> totals () const {
        return std::make_pair(numAllocations_, sizeAllocations_); 
      }

////////////////////////////////////////////////////////////////////////////////
/// @brief whether or not the heap is corrupted
////////////////////////////////////////////////////////////////////////////////

      bool isCorrupted () const {
        return isCorrupted(head_);
      }

////////////////////////////////////////////////////////////////////////////////
/// @brief whether or not the heap is corrupted
////////////////////////////////////////////////////////////////////////////////

      static bool isCorrupted (MemoryAllocation const*);

// -----------------------------------------------------------------------------
// --SECTION--                                                 private variables
// -----------------------------------------------------------------------------
      
    private:

////////////////////////////////////////////////////////////////////////////////
/// @brief mutex that protects the heap's linked list
////////////////////////////////////////////////////////////////////////////////

      std::mutex lock_;

////////////////////////////////////////////////////////////////////////////////
/// @brief first memory block on the heap
////////////////////////////////////////////////////////////////////////////////

      MemoryAllocation* head_;

////////////////////////////////////////////////////////////////////////////////
/// @brief total number of allocations made (ever increasing)
////////////////////////////////////////////////////////////////////////////////

      uint64_t numAllocations_;

////////////////////////////////////////////////////////////////////////////////
/// @brief total size of allocations made (ever increasing)
////////////////////////////////////////////////////////////////////////////////

      uint64_t sizeAllocations_;

  };
}

#endif
